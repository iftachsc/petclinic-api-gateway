
	def  microservices = ["vet-service", "visit-service", "customer-service"]
	println(env.getEnvironment().collect({environmentVariable ->  "${environmentVariable.key} = ${environmentVariable.value}"}).join("\n"))
	node{
	
	
	//def projectDisplayName = "api-gateway-${scmVars.GIT_BRANCH}-${scmVars.GIT_COMMIT}"
	
	openshift.withCluster() {
		openshift.withProject('cicd') {
			def reg = ~/^jenkins-cicd-/   
			def currentBuild = env.BUILD_TAG - reg
			def selector = openshift.selector("build", currentBuild)
			selector.describe()
			
			def build = selector.object()
			println build.status.phase
			def rev = build.spec.triggeredBy[0].githubWebHook.revision.git
			def commit = rev.commit
			def commiter = rev.commiter
			
			//def = builds = buildConfig.related( "builds" )
			
			//def commit  = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
			sh("git branch --contains ${commit}")
			def branch = sh(script: "git branch --contains ${commit}", returnStdout: true).trim()
			//sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
			sh('oc whoami')
			
			
			//def scmVars = checkout scm
			sh('ls')
			
			openshift.newProject("integ-${branch}-${commit}","--display-name", projectDisplayName)
			
			println builds
		}
	}
}

//node('maven') {
//   
//   def scmHost = '104.199.69.19'
//   def devEnv = 'dev'
//   def stageEnv = 'staging'
//   def appName = 'host-id'
//   
//   stage('Git checkout') {
//	 //step([$class: 'WsCleanup'])
//     //println payload
//	 sh('env')
//     //checkout([$class: "GitSCM", branches: [[name: "*/${nationalParksBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "nationalparks"]], submoduleCfg: [], userRemoteConfigs: [[url: "${nationalParksURL}"]]])
//     
//   }
//   //sh "oc new-app -f nationalparks/ose3/pipeline-buildconfig-template.json -p GIT_URI=${nationalParksURL} -p GIT_REF=${nationalParksBranch} -n ${project} --dry-run -o yaml | oc apply -f - -n ${project}"
//   stage ('Git Checkout') {
//     git branch: 'master', url: "http://${scmHost}/root/hostid.git"
//     sh 'git config --global user.email "iftachsc@innercloud.io"'
//   }
//   stage ('Test') {
//     sh 'npm  test'
//   }
//   stage ('Openshift Build') {
//     sh "oc start-build hostidapp --wait=true -n ${devEnv}"
//   }
//   stage ('Deploy DEV') {
//     sh "oc rollout latest ${host-id} -n ${devEnv}"
//   }
//   stage ('Deploy STAGE') {
//     timeout(time:15, unit:'MINUTES') {
//        input message: "Promote to STAGING?", ok: "Promote to Staging env"
//     }
//     try{
//       //def v = version()
//       // promote image
//       sh "oc tag ${devEnv}/${appName}":latest ${stageEnv}/${appName}:staging"
//       sh "oc tag shalom/hostidapp:latest shalom-stage/hostidapp:latest"
//     
//       // deploy stage image
//       sh "oc rollout staging ${appName} -n ${stageEnv}"
//     }
//     catch(Exception ex) {
//       println('Something went wrong')
//     }  
//   }
//   stage('Send Notifications'){
//     //email(receipeints: CommiterProvider);
//     sleep 5
//   }
//}

def version() {
  return sh(returnStdout: true, script: 'npm version preminor').trim()
}
