
def microservicesGitBase = 'https://github.com/iftachsc/petclinic'
def microservices = ["api-gateway","vet-service", "visit-service", "customer-service"]
def otherMicoservices
def thisMicroservice = null
def javaS2iImage = "redhat-openjdk18-openshift:1.2"
def customerDbUser = "mysql"
def customerDbPwd = "mysql"
def customerDbName = "customer_db"
def customerDbServiceHost = "customer-db"
def customerDbServicePort = "3306"

	  
//println(env.getEnvironment().collect({environmentVariable ->  "${environmentVariable.key} = ${environmentVariable.value}"}).join("\n"))
def commit = null
def committer = null
def integProject = null
def integProjectDisplay = null
node{
		
	stage('Unit Tests'){
		checkout scm
		sh('ls')
		//sh('mvn compile test')
		sh('git status')
	}
	stage('Code Coverage'){
		//sh('mvn jacoco')
		sleep(5)
	}
	stage('Create project for integ') {
	//def projectDisplayName = "api-gateway-${scmVars.GIT_BRANCH}-${scmVars.GIT_COMMIT}"
	
		openshift.withCluster() {
			openshift.withProject('cicd') {
				println openshift.rsh("jenkins-2-lk9pr", "hostname").out	
				def reg = ~/^jenkins-cicd-/   
				def currentBuild = env.BUILD_TAG - reg
				thisMicroservice = currentBuild.replace("-microservice-pipeline-${env.BUILD_NUMBER}","")
				otherMicoservices = microservices - thisMicroservice  //microservices.removeAll{ it == thisMicroservice}
				println("This microservice: ${thisMicroservice}")
				
				def selector = openshift.selector("build", currentBuild)
				//selector.describe()
				
				def build = selector.object()
				println build.status.phase
				def rev = build.spec.triggeredBy[0].githubWebHook.revision.git
				commit = rev.commit
				committer = rev.committer
				println "Committer: ${committer}"
				println "Commit: ${commit}"
				//def = builds = buildConfig.related( "builds" )
				//def commit  = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
				//def branch = sh(script: "git remote branch --contains ${commit}", returnStdout: true).trim()
				//sh("git log ${commit}..HEAD --ancestry-path  --oneline")
				//println branch
				//sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
				//sh('oc whoami')
				integProject = "integration-${thisMicroservice}-${env.BUILD_NUMBER}"
				integProjectDisplay = "Integ Tests ${thisMicroservice} #${env.BUILD_NUMBER}"
			}
			openshift.newProject(integProject,"--display-name", "\"${integProjectDisplay}\"","--description","\"commit: ${commit}, committer: ${committer.name}\"")
			//sh("oc delete project ${integProject}")
		}
	}
	
	stage('Creating Openshift Apps'){
		openshift.withCluster() {
			openshift.withProject(integProject) {
				
				//deploy mysql for customer-service
				println "Creating Database service for customer-service"
				openshift.newApp("mysql-persistent","-p","MYSQL_USER=${customerDbUser}",
						                            "-p","MYSQL_PASSWORD=${customerDbPwd}",
						                            "-p","MYSQL_DATABASE=${customerDbName}",
						                            "-p","DATABASE_SERVICE_NAME=${customerDbServiceHost}")
				                            	
				otherMicoservices.each {
					println "Creating microservice ${it} in project ${integProject}"
					if(it == "customer-service") {
						openshift.newApp("${javaS2iImage}~${microservicesGitBase}-${it}","--name",it,
														   "-e","DB_USERNAME=${customerDbUser}",
								                            "-e","DB_PASSWORD=${customerDbPwd}",
								                            "-e","DB_NAME=${customerDbName}",
								                            "-e","DB_HOST=${customerDbServiceHost}",
								                            "-e","DB_PORT=${customerDbServicePort}")
					}
					else {
						openshift.newApp("${javaS2iImage}~${microservicesGitBase}-${it}","--name",it)
					}
				}
				println "Deploying this microservice: ${thisMicroservice}"
				openshift.newApp("${javaS2iImage}~./","--name", thisMicroservice)
				
				println "Verifying builds:"
				timeout(15) {
					
					def allBuildsFinished = false
					microservices.each {
						def buildSel = openshift.selector("bc", it)
						buildSel.related('builds').untilEach(1) {
							//def buildStatus = sh(script: "oc get build ${it}-1 -o jsonpath='{.status.phase}'", returnStdout: true).trim()
							//since its the only build its #1
							return it.object().status.phase == "Complete"
						}
						return false
					}
					return allBuildsFinished
				
				}
				
				timeout(30) {
					microservices.each {
						def dcSelector = openshift.selector("dc", it)
						println "Verifying microservice deploy ${it}"
						dcSelector.related('pods').untilEach(1) {
		                    if (it.object().status.phase == 'Running') {
		                        return true;
		                    }
		                    return false;
						}	
					}
				}
				openshift.selector("dc", "api-gateway").related('pods').withEach{
					podName = it.object().metadata.name
			        openshift.rsh(podName, "curl localhost:8080").out	
			        //echo openshift.raw('get','pod', 'petclinic2-3-hjx72').out
				}
                
			}
		}
	}
	
	stage('Run tests') {}
}

//// curl http://api-gateway-integration-api-gateway-45.apps.cloudzone.com/api/customer/owners
// {"firstName":"iftach","lastName":"schonbaum","address":"25th Helsinki st.","city":"Tel Aviv","telephone":"0528288288"}

//node('maven') {
//   
//   def scmHost = '104.199.69.19'
//   def devEnv = 'dev'
//   def stageEnv = 'staging'
//   def appName = 'host-id'
//   
//   stage('Git checkout') {
//	 //step([$class: 'WsCleanup'])
//     //println payload
//	 sh('env')
//     //checkout([$class: "GitSCM", branches: [[name: "*/${nationalParksBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "nationalparks"]], submoduleCfg: [], userRemoteConfigs: [[url: "${nationalParksURL}"]]])
//     
//   }
//   //sh "oc new-app -f nationalparks/ose3/pipeline-buildconfig-template.json -p GIT_URI=${nationalParksURL} -p GIT_REF=${nationalParksBranch} -n ${project} --dry-run -o yaml | oc apply -f - -n ${project}"
//   stage ('Git Checkout') {
//     git branch: 'master', url: "http://${scmHost}/root/hostid.git"
//     sh 'git config --global user.email "iftachsc@innercloud.io"'
//   }
//   stage ('Test') {
//     sh 'npm  test'
//   }
//   stage ('Openshift Build') {
//     sh "oc start-build hostidapp --wait=true -n ${devEnv}"
//   }
//   stage ('Deploy DEV') {
//     sh "oc rollout latest ${host-id} -n ${devEnv}"
//   }
//   stage ('Deploy STAGE') {
//     timeout(time:15, unit:'MINUTES') {
//        input message: "Promote to STAGING?", ok: "Promote to Staging env"
//     }
//     try{
//       //def v = version()
//       // promote image
//       sh "oc tag ${devEnv}/${appName}":latest ${stageEnv}/${appName}:staging"
//       sh "oc tag shalom/hostidapp:latest shalom-stage/hostidapp:latest"
//     
//       // deploy stage image
//       sh "oc rollout staging ${appName} -n ${stageEnv}"
//     }
//     catch(Exception ex) {
//       println('Something went wrong')
//     }  
//   }
//   stage('Send Notifications'){
//     //email(receipeints: CommiterProvider);
//     sleep 5
//   }
//}

def version() {
  return sh(returnStdout: true, script: 'npm version preminor').trim()
}
