
def microservicesGitBase = 'https://github.com/iftachsc/petclinic'
def microservices = ["api-gateway","vet-service", "visit-service", "customer-service"]
def otherMicoservices
def thisMicroservice = null
def javaS2iImage = "redhat-openjdk18-openshift:1.2"
def customerDbUser = "mysql"
def customerDbPwd = "mysql"
def customerDbName = "customer_db"
def customerDbServiceHost = "customer-db"
def customerDbServicePort = "3306"

	  
//println(env.getEnvironment().collect({environmentVariable ->  "${environmentVariable.key} = ${environmentVariable.value}"}).join("\n"))
def commit = null
def committer = null
def integProject = null
def integProjectDisplay = null
node{
		
	stage('Unit Tests'){
		checkout scm
		sh('ls')
		//sh('mvn compile test')
		sh('git status')
	}
	stage('Code Coverage'){
		//sh('mvn jacoco')
		sleep(5)
	}
	stage('Create project for integ') {
	//def projectDisplayName = "api-gateway-${scmVars.GIT_BRANCH}-${scmVars.GIT_COMMIT}"
	
		openshift.withCluster() {
			openshift.withProject('cicd') {
					
				def reg = ~/^jenkins-cicd-/   
				def currentBuild = env.BUILD_TAG - reg
				thisMicroservice = currentBuild.replace("-microservice-pipeline-${env.BUILD_NUMBER}","")
				otherMicoservices = microservices - thisMicroservice  //microservices.removeAll{ it == thisMicroservice}
				println("This microservice: ${thisMicroservice}")
				
				def selector = openshift.selector("build", currentBuild)
				//selector.describe()
				
				def build = selector.object()
				println build.status.phase
				def rev = build.spec.triggeredBy[0].githubWebHook.revision.git
				commit = rev.commit
				committer = rev.committer
				println "Committer: ${committer}"
				println "Commit: ${commit}"
				//def = builds = buildConfig.related( "builds" )
				//def commit  = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
				//def branch = sh(script: "git remote branch --contains ${commit}", returnStdout: true).trim()
				//sh("git log ${commit}..HEAD --ancestry-path  --oneline")
				//println branch
				//sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
				//sh('oc whoami')
				integProject = "integration-${thisMicroservice}-${env.BUILD_NUMBER}"
				integProjectDisplay = "Integ Tests ${thisMicroservice} #${env.BUILD_NUMBER}"
			}
			openshift.newProject(integProject,"--display-name", "\"${integProjectDisplay}\"","--description","\"commit: ${commit}, committer: ${committer.name}\"")
			//sh("oc delete project ${integProject}")
		}
	}
	
	stage('Creating Openshift Apps'){
		openshift.withCluster() {
			openshift.withProject(integProject) {
				
				//deploy mysql for customer-service
				println "Creating Database service for customer-service"
				openshift.newApp("mysql-persistent","-p","MYSQL_USER=${customerDbUser}",
						                            "-p","MYSQL_PASSWORD=${customerDbPwd}",
						                            "-p","MYSQL_DATABASE=${customerDbName}",
						                            "-p","DATABASE_SERVICE_NAME=${customerDbServiceHost}")
				                            	
				otherMicoservices.each {
					println "Creating microservice ${it} in project ${integProject}"
					if(it == "customer-service") {
						openshift.newApp("${javaS2iImage}~${microservicesGitBase}-${it}","--name",it,
														   "-e","DB_USERNAME=${customerDbUser}",
								                            "-e","DB_PASSWORD=${customerDbPwd}",
								                            "-e","DB_NAME=${customerDbName}",
								                            "-e","DB_HOST=${customerDbServiceHost}",
								                            "-e","DB_PORT=${customerDbServicePort}")
					}
					else {
						openshift.newApp("${javaS2iImage}~${microservicesGitBase}-${it}","--name",it)
					}
				}
				println "Deploying this microservice: ${thisMicroservice}"
				openshift.newApp("${javaS2iImage}~./","--name", thisMicroservice)
				
				println "Verifying builds:"
				timeout(20) {
					
					def allBuildsFinished = false
					microservices.each {
						def buildSel = openshift.selector("bc", it)
						buildSel.related('builds').untilEach(1) {
							//def buildStatus = sh(script: "oc get build ${it}-1 -o jsonpath='{.status.phase}'", returnStdout: true).trim()
							//since its the only build its #1
							return it.object().status.phase == "Complete"
						}
						return false
					}
					return allBuildsFinished
				
				}
				
				timeout(30) {
					microservices.each {
						def dcSelector = openshift.selector("dc", it)
						println "Verifying microservice deploy ${it}"
						dcSelector.related('pods').untilEach(1) {
		                    if (it.object().status.phase == 'Running') {
		                        return true;
		                    }
		                    return false;
						}	
					}
				}
				sh("oc expose svc api-gateway")
				def apiGwEndpoint = sh(returnStdout: true, script: "oc get route -l app=api-gateway -o jsonpath='{.items[0].spec.host}'").trim()

				//api call - add owner
				def apiCommand = "curl -H \"Content-Type: application/json\" -X POST " + 
						"-d  '{\"firstName\":\"iftach2\",\"lastName\":\"schonbaum\",\"address\":\"25th Helsinki st.\",\"city\":\"Tel Aviv\",\"telephone\":\"0528288288\"}' " +
						"http://localhost:8080/api/customer/owners"
			
				println apiCommand
				openshift.selector("dc", "api-gateway").related('pods').withEach{
					podName = it.object().metadata.name
			        println sh(script: "oc rsh ${podName} ${apiCommand}",returnStdout: true).trim()	
			        //echo openshift.raw('get','pod', 'petclinic2-3-hjx72').out
				}
				
				def mysqlCommand = "mysql -umysql -pmysql -hlocalhost -e 'select * from owners' customer_db"
				openshift.selector("dc", "customer-db").related('pods').withEach{
					podName = it.object().metadata.name
					def mysqlOut = sh(script: "oc rsh ${podName} ${apiCommand}",returnStdout: true).trim()	
			        println mysqlOut
				}
				
                
			}
		}
	}
	
	stage('Run tests') {}
}
